"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""
Defines when a policy shall be executed.
"""
enum ApplyPolicy {
  """
  Before the resolver was executed.
  """
  BEFORE_RESOLVER

  """
  After the resolver was executed.
  """
  AFTER_RESOLVER

  """
  The policy is applied in the validation step before the execution.
  """
  VALIDATION
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Lookup a user by their ID.
  """
  user(id: ID!): User!

  """
  The currently authenticated user.
  """
  viewer: User
}

type Mutation {
  """
  Sign in using an email and password.
  """
  signIn(
    """
    The user's email address.
    """
    email: String!

    """
    The user's password.
    """
    password: String!
  ): SignInResult!
}

type SignInResult {
  """
  An authentication token.
  """
  token: String!
  query: Query!
}

type User implements Node {
  """
  The user's unique identifier.
  """
  id: ID!

  """
  The user's non-unique display name.
  """
  userName: String

  """
  The user's current email address.
  """
  email: String

  """
  The roles that the user is a member of.
  """
  roles: [String!]!
}
