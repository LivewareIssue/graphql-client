"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""
Defines when a policy shall be executed.
"""
enum ApplyPolicy {
  """
  Before the resolver was executed.
  """
  BEFORE_RESOLVER

  """
  After the resolver was executed.
  """
  AFTER_RESOLVER

  """
  The policy is applied in the validation step before the execution.
  """
  VALIDATION
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!

  """
  The currently authenticated user.
  """
  viewer: EntUser

  """
  List all tasks.
  """
  tasks: [EntTask!]!

  """
  Lookup a task by its unique identifier.
  """
  task(id: ID!): EntTask

  """
  List all users.
  """
  users: [EntUser!]!

  """
  Lookup a user by their unique identifier.
  """
  user(id: ID!): EntUser

  """
  List all comments.
  """
  comments: [EntComment!]!

  """
  Lookup a comment by its unique identifier.
  """
  comment(id: ID!): EntComment
}

type Mutation {
  """
  Sign in using an email and password.
  """
  signIn(
    """
    The user's email address.
    """
    email: String!

    """
    The user's password.
    """
    password: String!
  ): SignInResult!
}

type EntTask implements Node {
  """
  This task's unique identifier.
  """
  id: ID!

  """
  This task's title.
  """
  title: String!

  """
  This task's content.
  """
  content: String!

  """
  The current status of this task.
  """
  status: TaskStatus!

  """
  The approximate size of this task.
  """
  size: TaskSize!

  """
  This task's priority.
  """
  priority: TaskPriority!

  """
  The date and time when this task was created.
  """
  createdAt: DateTime!

  """
  The date and time when this task was last updated.
  """
  updatedAt: DateTime!

  """
  The unique identifier of the user that this task is currently assigned to.
  """
  ownerId: String

  """
  The user that this task is currently assigned to.
  """
  owner: EntUser

  """
  The comments made on this task.
  """
  comments: [EntComment!]!

  """
  The tasks that this task depends on.
  """
  dependsOn: [EntTask!]!
}

type EntComment implements Node {
  """
  This comment's unique identifier.
  """
  id: ID!

  """
  This comment's content.
  """
  content: String!

  """
  The date and time when this comment was created.
  """
  createdAt: DateTime!

  """
  The date and time when this comment was last updated.
  """
  updatedAt: DateTime!

  """
  The unique identifier of the user that made this comment.
  """
  authorId: String!

  """
  The user that made this comment.
  """
  author: EntUser!
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskSize {
  XS
  S
  M
  L
  XL
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  CLOSED
}

type SignInResult {
  """
  An authentication token.
  """
  token: String!
  query: Query!
}

type EntUser implements Node {
  """
  This roles assigned to this user.
  """
  roles: [String!]!

  """
  The tasks assigned to this user.
  """
  tasks: [EntTask!]!

  """
  The comments made by this user.
  """
  comments: [EntComment!]!

  """
  This user's unique identifier.
  """
  id: ID!

  """
  This user's display name.
  """
  userName: String

  """
  This user's email address.
  """
  email: String

  """
  This user's phone number.
  """
  phoneNumber: String
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")
